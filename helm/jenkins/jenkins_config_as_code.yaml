jenkins:
  systemMessage: "Jenkins configured automatically by Jenkins Configuration as Code plugin\n\n"
  scmCheckoutRetryCount: 2
  clouds:
  - kubernetes:
      containerCap: 10
      containerCapStr: "10"
      jenkinsTunnel: "jenkins-agent.jenkins.svc.cluster.local:50000"
      jenkinsUrl: "http://jenkins.jenkins.svc.cluster.local:8080"
      name: "kubernetes"
      namespace: "jenkins"
      podLabels:
      - key: "jenkins/jenkins-jenkins-agent"
        value: "true"
      serverUrl: "https://kubernetes.default"
      templates:
      - containers:
        - args: "^${computer.jnlpmac} ^${computer.name}"
          envVars:
          - envVar:
              key: "JENKINS_URL"
              value: "http://jenkins.jenkins.svc.cluster.local:8080/"
          image: "jenkins/inbound-agent:3206.vb_15dcf73f6a_9-3"
          name: "jnlp"
          resourceLimitCpu: "512m"
          resourceLimitMemory: "512Mi"
          resourceRequestCpu: "512m"
          resourceRequestMemory: "512Mi"
          workingDir: "/home/jenkins/agent"
        id: "3299fd0af63fe1657951f62572fa2033b41c6da3e26306a1f6bbbdf095291cb2"
        label: "jenkins-jenkins-agent"
        name: "default"
        namespace: "jenkins"
        nodeUsageMode: NORMAL
        podRetention: "never"
        serviceAccount: "default"
        slaveConnectTimeout: 100
        slaveConnectTimeoutStr: "100"
        yamlMergeStrategy: "override"
unclassified:
  buildDiscarders:
    configuredBuildDiscarders:
    - "jobBuildDiscarder"
  fingerprints:
    fingerprintCleanupDisabled: false
    storage: "file"
  mailer:
    charset: "UTF-8"
    useSsl: false
    useTls: false
  pipelineStepsAWS:
    enableCredentialsFromNode: false
  pollSCM:
    pollingThreadCount: 10
  # scmGit:
  #   addGitTagAction: false
  #   allowSecondFetch: false
  #   createAccountBasedOnEmail: false
  #   disableGitToolChooser: false
  #   hideCredentials: false
  #   showEntireCommitSummaryInChanges: false
  #   useExistingAccountWithSameEmail: false
  thinBackup:
    backupAdditionalFiles: false
    backupBuildArchive: false
    backupBuildResults: false
    backupBuildsToKeepOnly: false
    backupConfigHistory: false
    backupNextBuildNumber: false
    backupPath: "/var/jenkins_home/thinBackup/"
    backupPluginArchives: false
    backupUserContents: false
    cleanupDiff: true
    failFast: true
    forceQuietModeTimeout: 120
    moveOldBackupsToZipFile: false
    nrMaxStoredFull: 7
    waitForIdle: false
tool:
  go:
    installations:
    - name: "Go-1.21.9"
      properties:
      - installSource:
          installers:
          - golangInstaller:
              id: "1.21.9"
credentials:
  system:
    domainCredentials:
    - credentials:
      - aws:
          accessKey: "AKIA5KUZFEQAWFWBQEBX"
          description: "inadev-s3"
          id: "f7d18599-05bd-4d85-a431-111eeff354df"
          scope: GLOBAL
          secretKey: "{AQAAABAAAAAwMArek9//vcLSjRqEtSiXA7eQhYT1PORqpytvkLoFf30YlYqPxFH1gDRYiFyFsH4YChlUk0aK7lHsCqSKKEXpiw==}"
# JobDSL definition of the seed-job.
# This job creates all other jobs from a Bitbucket repository.
# With this mechanism, it is possible to have a simple job definition in your VCS and there is no need to make
# backups of the jobs. Simply redeploy Jenkins and everything runs as before.
# This job will also be used to add/delete jobs by simply adding new job definitions to the job file in this repository.
jobs:
  - script: >
      pipelineJob('job-name') {
        definition {
          cps {
            script('''
              pipeline {
                agent any
                stages {
                  stage('Stage name 1') {
                    steps {
                      // your logic here
                    }
                  }
                  stage('Stage name 2') {
                    steps {
                      // your logic here
                    }
                  }
                }
              }
            }
          ''')   
          }
        }
      }

  #     job('seed_job') {
  #         label('jenkins-master')
  #         multiscm {
  #             git {
  #                 remote {
  #                     url('https://github.com/Ragin-LundF/jenkins-jobdsl-remote.git')
  #                 }
  #                 extensions {
  #                   relativeTargetDirectory('jobdslscript')
  #                 }
  #             }
  #             git {
  #                 remote {
  #                     url('https://github.com/Ragin-LundF/k8s-jcasc-mgmt-example.git')
  #                 }
  #                 extensions {
  #                   relativeTargetDirectory('jobdefinition')
  #                 }
  #             }
  #         }
  #         steps {
  #             dsl {
  #                 lookupStrategy('SEED_JOB')
  #                 external('jobdslscript/JenkinsJobDslRemote.groovy')
  #             }
  #         }
  #         triggers {
  #             scm('* * * * *')
  #         }
  #     }
  # - script: >
  #     pipelineJob('default-agent') {
  #       definition {
  #         cps {
  #           script("""\
  #               pipeline {
  #                   agent any
  #                       tools {
  #                       go 'Go-1.21.9'
  #                   }
  #                   environment {
  #                       GIT_SSH_COMMAND = 'ssh -o StrictHostKeyChecking=no' // Skip host key checking
  #                   }
  #                   stages {
  #                       stage('Checkout') {
  #                           steps {
  #                               git branch: 'main', url: 'https://github.com/jmontilla202/inadev-devops-exercise.git'
  #                           }
  #                       }
  #                       stage('Build') {
  #                           steps {
  #                               sh '''go version
  #                                   cd "wtw/src"
  #                                   go get "github.com/gin-gonic/gin"
  #                                   go build'''
  #                           }
  #                       }
  #                       stage('Test') {
  #                           steps {
  #                               sh 'echo test'
  #                           }
  #                       }
  #                       stage('Deploy') {
  #                           steps {
  #                               sh 'echo deploy'
  #                           }
  #                       }
  #                   }
  #               }
  #             }""".stripIndent())
  #         }
  #       }
  #     }